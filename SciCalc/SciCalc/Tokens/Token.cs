using System;
using System.Linq;

namespace SciCalc.Tokens
{
    public abstract class Token
    {
        private static int superIndex;

        protected Token(string symbol)
        {
            this.Symbol = symbol.Trim();
            if (symbol.Length > 1)
            {
                this.PrefixSpace = symbol.First() == ' ';
                this.PostfixSpace = symbol.Last() == ' ';
            }

            this.Index = superIndex++;
        }

        public TokenType Type { get; protected set; }
        public double Value { get; protected set; }
        public string Symbol { get; protected set; }
        public int ArgumentCount { get; protected set; }
        public int Priority { get; protected set; }
        public long Index { get; private set; }

        public bool PrefixSpace { get; }
        public bool PostfixSpace { get; }

        //by default all tokens are valid unless explicitly invalidated
        public bool IsValid { get; set; } = true;
        public virtual string ErrorMessage => $"Invalid token '{this.Symbol}'.";

        //autogenerated token, such as closing parent, or missing 0 before dot
        public bool Inferred { get; set; } = false;

        public virtual double Execute(double arg)
        {
            throw new NotImplementedException();
        }

        public virtual double Execute(double arg1, double arg2)
        {
            throw new NotImplementedException();
        }

        #region equality
        private bool Equals(Token other)
        {
            return this.Type == other.Type && this.Value.Equals(other.Value) && string.Equals(this.Symbol, other.Symbol) &&
                   this.IsValid == other.IsValid && this.Inferred == other.Inferred;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;

            var other = obj as Token;
            return other != null && this.Equals(other);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (int)this.Type;
                hashCode = (hashCode * 397) ^ this.Value.GetHashCode();
                hashCode = (hashCode * 397) ^ this.Symbol.GetHashCode();
                hashCode = (hashCode * 397) ^ this.IsValid.GetHashCode();
                hashCode = (hashCode * 397) ^ this.Inferred.GetHashCode();
                return hashCode;
            }
        }

        public static bool operator ==(Token left, Token right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Token left, Token right)
        {
            return !Equals(left, right);
        }
        #endregion

    }
}